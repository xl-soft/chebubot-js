const  { VK, resolveResource } = require('vk-io') 
const anecdote = require('./scripts/skills/anecdote')
const env = require('./scripts/env')
const { HearManager } = require('@vk-io/hear')
const random = require('./scripts/skills/random')
const description = require('./scripts/description')
const path = require('path')
const admin = require('./scripts/admin')
const os = require('os')
const mongoose = require('mongoose')
const print = require('./scripts/print')
const Cock = require('./models/Cock')
const Ban = require('./models/Ban')
const roll = require('./scripts/roll')
const { findOne } = require('./models/Cock')
const vk = new VK({
	token: env.VK_TOKEN,
    apiLimit: 20
});

const message = new HearManager()

async function checkban(id) {
    let ban = await Ban.findOne({id: id})
    if (ban) return false; else return true
}

vk.updates.on('message_new', message.middleware);
vk.updates.start()
print.ok('VK API connected')
mongoose.set('strictQuery', false);
mongoose.connect(env.MONGODB_URI_STRING, () => print.ok('MongoDB is ready'))

// "—á–µ–±—É –æ—Å–ª–µ–ø–∏—Ç—å" - –æ—Å–ª–µ–ø–ª—è–µ—Ç –Ω–∞—Ö—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π

description.admin.add('–ø–æ–º–æ—â—å', '—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞')
message.hear(/^—á–µ–±—É –∞–¥–º–∏–Ω –ø–æ–º–æ—â—å$/, async context => {
    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let user = await vk.api.users.get({user_id: context.senderId});
    if (admin.includes(user[0].id)) {
        await context.send(`–ü—Ä–∏–≤–µ—Ç ${user[0].first_name}, –∞–¥–º–∏–Ω –ª—É—á—à–µ–≥–æ –±–æ—Ç–∞ \n –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º–æ–µ–π –∂–∏–∑–Ω–∏:`);
        await context.send(`
        –ö–æ–º–∞–Ω–¥—ã:\n
        ${description.admin.get()}`);
    }
})

description.admin.add('—á–µ–∫', '–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞')
message.hear(/^—á–µ–±—É –∞–¥–º–∏–Ω —á–µ–∫$/, async context => {
    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let user = await vk.api.users.get({user_id: context.senderId});
    if (admin.includes(user[0].id)) {
        await context.send(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –æ –º–æ–π –¥–æ—Ä–æ–≥–æ–π, –∏ –≤—Å–µ–º–æ–≥—É—â–∏–π —Ö–æ–∑—è–∏–Ω - ${user[0].first_name} ${user[0].last_name}`, { 
            attachment: await vk.upload.messagePhoto({ source: { value: path.join(__dirname + '/public/img/admin.png') } }) 
        })
        await context.send(`–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç—è—Ö~~~`)
        await context.send(`
        –í –º–æ–π —Å–æ–∫–µ—Ç –≤–ª–∞–∂–Ω–æ –≤–æ—à–µ–ª ${os.cpus()[0].model} –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ ${os.cpus()[0].speed / 1000} –ì–ì—Ü, –∞ –≤—Å–µ–º —ç—Ç–∏–º –¥–æ–±—Ä–æ–º —è –∏–≥—Ä–∞—é—Å—å –≤ —Å–≤–æ–µ–π –∫—Ä–æ–≤–∞—Ç–∫–µ "${os.version()}"\n
        –ú–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä—É—à–∫–∞ NodeJS ${process.version} –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å... —è –∏–≥—Ä–∞—é—Å—å –µ–π —É–∂–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ ${Math.round(os.uptime() / 3600)} —á–∞—Å–æ–≤ ü•∞ü•∞ü•∞! \n
        –õ–∞–¥–Ω–æ —Ö–æ–∑—è–∏–Ω, —è —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –∫–∞–∫ —É –º–µ–Ω—è –¥–µ–ª–∞, —Ç–µ–ø–µ—Ä—å —è –ø—Ä–æ–¥–æ–ª–∂—É –±—ã—Ç—å —Ç–≤–æ–µ–π —Ä–∞–±—ã–Ω–µ–π, –∏ –ø–∞—Ö–∞—Ç—å –≤–æ —Å–ª–∞–≤—É –∞—Ä—Ç—Å—Ç–æ—Ü–∫–∏ –∏ —Ä–∞—Å—Ç—É—â–∏—Ö –∫–æ–∫–æ–≤!
        `)
    }
})

description.admin.add('–±–∞–Ω –ø—Ä–∏—á–∏–Ω–∞|—Å—Å—ã–ª–∫–∞', '–±–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ')
message.hear(/^—á–µ–±—É –∞–¥–º–∏–Ω –±–∞–Ω (.+)$/, async context => {
    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let user = await vk.api.users.get({user_id: context.senderId});
    let data = {
        query: context.$match[1].split('|'),
        target: ''
    }
    if (admin.includes(user[0].id)) {
        if (context.hasReplyMessage) data.target = context.replyMessage.senderId
        if (data.query[1]) { 
            let link = await resolveResource({api: vk.api, resource: data.query[1]})
            data.target = link.id
        }
        if (admin.includes(data.target) == false) {
            let ban = await Ban.findOne({id: data.target})
            if(!ban) {
                await new Ban({id: data.target, reason: data.query[0]}).save()
                let user = await vk.api.users.get({user_id: data.target});
                await context.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id${data.target} (${user[0].first_name} ${user[0].last_name}) –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞—Ö—É–π –ø–æ –ø—Ä–∏—á–∏–Ω–µ ${data.query[0]}`, { 
                    attachment: await vk.upload.messagePhoto({ source: { value: path.join(__dirname + '/public/img/ban.png') } }) 
                })
            } else {
                await context.send(`@id${data.target} (–ö–æ–Ω—á–µ–ª—ã–≥–∞) —É–∂–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω, –∞ –∑–∞–±–∞–Ω–∏—Ç—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è(`, { 
                    attachment: await vk.upload.messagePhoto({ source: { value: path.join(__dirname + '/public/img/alreadyban.png') } }) 
                })
            }

        }
    }
})

description.admin.add('–∞–Ω–±–∞–Ω —Å—Å—ã–ª–∫–∞', '—Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ')
message.hear(/^—á–µ–±—É –∞–¥–º–∏–Ω –∞–Ω–±–∞–Ω(.{0,30})$/, async context => {
    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let user = await vk.api.users.get({user_id: context.senderId});
    let data = {
        query: context.$match[1],
        target: ''
    }
    
    if (admin.includes(user[0].id)) {
        if (context.hasReplyMessage) data.target = context.replyMessage.senderId
        if (data.query) { 
            let link = await resolveResource({api: vk.api, resource: data.query})
            data.target = link.id
        }
        if (admin.includes(data.target) == false) {
            let user = await vk.api.users.get({user_id: data.target});
            let ban = await Ban.findOne({id: data.target})
            if(!ban) {
                await context.send(`–ö–∞–∂–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id${data.target} (${user[0].first_name} ${user[0].last_name}) –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤ –Ω–µ—Ç, –Ω–æ —è –±—ã –∑–∞–±–∞–Ω–∏–ª`, { 
                    attachment: await vk.upload.messagePhoto({ source: { value: path.join(__dirname + '/public/img/alreadyunban.png') } }) 
                })
            } else {
                await Ban.deleteOne({id: data.target})
                await context.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id${data.target} (${user[0].first_name} ${user[0].last_name}) –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω –∏ –æ–±–µ—â–∞–µ—Ç –±–æ–ª—å—à–µ –Ω–µ –±–∞–ª–æ–≤–∞—Ç—Å—è`, { 
                    attachment: await vk.upload.messagePhoto({ source: { value: path.join(__dirname + '/public/img/unban.png') } }) 
                })
            }

        }
    }
})




description.add('–ø–æ–º–æ—â—å', '—Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞')
message.hear(/^—á–µ–±—É –ø–æ–º–æ—â—å$/, async context => {
    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let user = await vk.api.users.get({user_id: context.senderId});
	await context.send(`–ü—Ä–∏–≤–µ—Ç ${user[0].first_name}, –ø–æ–º–æ—â–∏ –Ω–µ –±—É–¥–µ—Ç, –æ–±–æ—Å—Ä–∏—Å—å \n –ù—É —Ö–æ—Ç—è –ª–∞–¥–Ω–æ, –¥–µ—Ä–∂–∏:`);
    await context.send(`
    –ö–æ–º–∞–Ω–¥—ã:\n
    ${description.get()}
    `);
})

description.add('–∞–Ω–∏–∫', '–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞—è–Ω–∏—Å—Ç—ã–π –∞–Ω–∏–∫ (99% –≥–æ–≤–Ω–∞)')
message.hear(/^—á–µ–±—É –∞–Ω–∏–∫$/, async context => {
    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let id = random.between(1, 1142)
    await context.send(`–†–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç #${id}\n\n${await anecdote.generate(id)}`, { 
        attachment: await vk.upload.messagePhoto({ source: { value: path.join(__dirname + '/public/img/babka.png') } }) 
    })
})

description.add('–ø–æ–Ω–∏', '–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é –ø–æ–Ω—è—Ö—É')
message.hear(/^—á–µ–±—É –ø–æ–Ω–∏$/, async context => {
    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let id = random.between(10000, 99999)
    await context.send(`–†–∞–Ω–¥–æ–º–Ω–∞—è –ø–æ–Ω–∏ #${id}`, { 
        attachment: await vk.upload.messagePhoto({ source: { value: `https://thisponydoesnotexist.net/v1/w2x-redo/jpgs/seed${id}.jpg` } }) 
    })
})

description.add('—Ñ—É—Ä—Ä–∏', '–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é —Ñ—É—Ä—Å–æ–Ω—É')
message.hear(/^—á–µ–±—É —Ñ—É—Ä—Ä–∏$/, async context => {
    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let id = random.between(10000, 99999)
    await context.send(`–†–∞–Ω–¥–æ–º–Ω–∞—è —Ñ—É—Ä—Ä—è #${id}`, { 
        attachment: await vk.upload.messagePhoto({ source: { value: `https://thisfursonadoesnotexist.com/v2/jpgs/seed${id}.jpg` } }) 
    })
})

description.add('–∫–æ–∫', '—Ä–∞–∑ –≤ –¥–µ–Ω—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–∫–∞')
message.hear(/^—á–µ–±—É –∫–æ–∫$/, async context => {
    let chat
    chat = "global"
    // if (context.isChat) {
    //      chat = await vk.api.messages.getConversationsById({
    //         peer_ids: context.peerId
    //     }); chat = chat.items[0].chat_settings.title
    // } else {
        
    // }


    let status = {
        location: 'overworld',
        death: false,
        bonus: 0,
        growed: 0,
        current: 0,
        string: {
            start: '–ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è',
            state: '–≤—ã—Ä–æ—Å',
            buff: '–Ω–µ –±—ã–ª–∏ –Ω–∞–ª–æ–∂–µ–Ω—ã –±–∞—Ñ—Ñ—ã',
            debuff: '–Ω–µ –±—ã–ª–∏ –Ω–∞–ª–æ–∂–µ–Ω—ã –¥–µ–±–∞—Ñ—Ñ—ã',
            history: '–ö–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã –æ—á–Ω—É–ª–∏—Å—å –≤ –ª–µ—Å—É, —á—Ç–æ –∂–µ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å –Ω–∞ —ç—Ç–æ–º –¥–æ–ª–≥–æ–º –ø—É—Ç–∏?'
        },
        image: '1_20'
    }


    if (await context.isGroup) return
    if(checkban(context.senderId) == true) return
    let user = await vk.api.users.get({user_id: context.senderId})
    let check = await Cock.findOne({id: user[0].id})
    let next = 86400000
    if (admin.includes(user[0].id)) next = 100
    if (!check) { await new Cock({id: user[0].id, name: `${user[0].first_name}`, next: Date.now(), chat: chat, lenght: 0}).save(); status.string.start = '–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è' }
    let cock = await Cock.findOne({id: user[0].id})
    if (cock.next > Date.now()) {
        await context.send(`@id${user[0].id} (${cock.name}), —Å–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∏–∑–º–µ—Ä—è–ª–∏ –∫–æ–∫.\n –ö—Å—Ç–∞—Ç–∏ —É –≤–∞—Å ${cock.lenght}—Å–º`)
        return
    }
    status.current = cock.lenght
    status.location = cock.location

    async function trykill(reason) {
        if (roll.death() == true) {
            status.growed = Number(`-${status.current}`)
            status.bonus = 0
            status.current = 0
            status.string.buff = '–ø–æ–ª–æ–∂–∏–ª–∏ –≤–µ–Ω–æ–∫'
            status.string.debuff = '–≤—ã —É–º–µ—Ä–ª–∏ –Ω–∞—Ö—É–π'
            status.image = '_death'
            if (cock.record < cock.lenght) {
                await Cock.updateOne({id: cock.id}, {next: Date.now() + next, record: cock.lenght})
                status.string.history = `${reason} \n\n –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω —Å –Ω–æ–≤—ã–º —Ä–µ–∫–æ—Ä–¥–æ–º: ${cock.lenght}\n"—á–µ–±—É –∫–æ–∫" - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ`
            } else {
                await Cock.updateOne({id: cock.id}, {next: Date.now() + next})
                status.string.history = `${reason} \n\n –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω —Å —Ä–µ–∫–æ—Ä–¥–æ–º: ${cock.record}\n"—á–µ–±—É –∫–æ–∫" - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ`
            }
        }
    }

    // 0 - 20 —Å–º (–í–Ω–µ—à–Ω–∏–π –º–∏—Ä - 1 —á–∞—Å—Ç—å)
    if (0 <= status.current && status.current <= 20) {
        status.growed = random.between(1, 15)
        status.string.history = `–ö–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã –æ—á–Ω—É–ª–∏—Å—å –≤ –ª–µ—Å—É, —á—Ç–æ –∂–µ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å –Ω–∞ —ç—Ç–æ–º –¥–æ–ª–≥–æ–º –ø—É—Ç–∏?`
        status.image = '1_20'
    }

    // 21 - 40 —Å–º (–í–Ω–µ—à–Ω–∏–π –º–∏—Ä - 1 —á–∞—Å—Ç—å)
    if (21 <= status.current && status.current <= 40) {
        status.growed = random.between(1, 10)
        status.bonus = random.between(1, 3)
        status.string.buff = `–±—ã–ª –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç –æ—á–∏—â–µ–Ω–∏—è (+${status.bonus})`
        status.string.history = `–í–∞—à–∏ —è–∏—á–∫–∏ –∑–∞–º–µ—Ç–Ω–æ –≤—Å–ø–æ—Ç–µ–ª–∏, –∏ –≤—ã —Ä–µ—à–∏–ª–∏ –∏—Å–∫—É–ø–Ω—É—Ç—Å—è. –í–æ–¥–∏—á–∫–∞ –ø—Ä–∏—è—Ç–Ω–æ –æ–º—ã–≤–∞–µ—Ç –≤–∞—à–∏ –≤–æ–ª–æ—Å–∏–∫–∏ –∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—Ä–∏–ª–∏–≤ —Å–∏–ª`
        status.image = '21_40'
    }

    // 41 - 60 —Å–º (–í–Ω–µ—à–Ω–∏–π –º–∏—Ä - 1 —á–∞—Å—Ç—å)
    if (41 <= status.current && status.current <= 60) {
        status.growed = random.between(1, 15)
        status.string.history = `–í–∞—à –∫–∏—à–º–∏—à –Ω–∞–∫–æ–Ω–µ—Ü —Ç–æ –±—ã–ª —Å–º—ã—Ç, –≤—ã –∑–∞—Ä–∞–∑–∏–ª–∏ —Å–ø–∏–¥–æ–º, —Ä–∞–∫–æ–º –∏ —Å–ø–∏–¥–æ—Ä–∞–∫–æ–º —Ä–µ–∫—É –≤ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫—É–ø–∞–ª–∏—Å—å, –∞ —Å–∞–º–∏ –±–æ—è—Å—å –ø–æ–∑–æ—Ä–∞ –≤—ã–ª–µ–∑–ª–∏ –≤ –ø–µ—â–µ—Ä–µ. –¢—É—Ç —Ç–µ–º–Ω–æ, –Ω–æ –≤—ã –≤—ã—Ç–∞—â–∏–ª–∏ –∏–∑ —É—Ä–µ—Ç—Ä—ã —Ñ–∞–∫–µ–ª–∞ –∏ –æ—Å–≤–µ—Ç–∏–ª–∏ —Å–≤–æ–π –ø—É—Ç—å, –Ω–∞–¥–æ –≤—ã–±–∏—Ä–∞—Ç—Å—è...`
        status.image = '41_60'
        if (roll.buff() == true) {
            status.bonus = random.between(1, 2)
            status.string.buff = `–±—ã–ª –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç –æ—á–∏—â–µ–Ω–∏—è (+${status.bonus})`
        }
        await trykill(`–ü–æ–∫–∞ –≤—ã –≤—ã–ª–µ–∑–∞–ª–∏ –∏–∑ —Ä–µ–∫–∏, –≤–∞—à —è–∏—á–∫–∏ –∑–∞—Ü–µ–ø–∏–ª–∏—Å—å –∑–∞ –∫–æ—Ä–∞–ª–ª, –ø–æ–ø—ã—Ç–∞—è—Å—å –≤—ã–±—Ä–∞—Ç—Å—è –≤—ã –∑–∞–ø—É—Ç–∞–ª–∏—Å—å –µ—â–µ —Å–∏–ª—å–Ω–µ–µ –∏ –Ω–∞—Ö—É–π –∑–∞–¥–æ—Ö–Ω—É–ª–∏—Å—å –∏—Å–ø—É—Å—Ç–∏–≤ —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∫–∏.`)
    }

    // 61 - 100 —Å–º (–í–Ω–µ—à–Ω–∏–π –º–∏—Ä - 1 —á–∞—Å—Ç—å)
    if (61 <= status.current && status.current <= 100) {
        status.growed = random.between(1, 20)
        status.string.history = `–ü–µ—â–µ—Ä–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –≥–ª—É–±–∂–µ —á–µ–º –ø–∏–∑–¥–∞ —Ç–≤–æ–µ–π –º–∞–º–∞—à–∏, –≤—ã–±—Ä–∞—Ç—Å—è –æ—Ç—Å—é–¥–∞ –±—É–¥–µ—Ç –Ω–µ–ø—Ä–æ—Å—Ç–æ, –Ω–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–∫–µ–ª–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤—ã—Ç–∞—â–∏–ª –∏–∑ —Å–≤–æ–µ–π —É—Ä–µ—Ç—Ä—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ò –∫–∞–∫ —Ç—ã —Å–µ–±–µ –ø–µ–Ω–∏—Å –∏–º–∏ –Ω–µ –æ–±–∂–∏–≥–∞–µ—à—å...`
        status.image = '61_100'
        if (roll.buff() == true) {
            status.bonus = random.between(1, 1)
            status.string.buff = `–±—ã–ª –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç –±–æ–¥—Ä–æ—Å—Ç–∏ –æ—Ç –∫–∞–ø–µ–ª—å–∫–∏ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã —É–ø–∞–≤—à–µ–π –Ω–∞ –≤–∞—à—É –≥–æ–ª–æ–≤–∫—É —Å –ø–æ—Ç–æ–ª–∫–∞ –ø–µ—â–µ—Ä—ã (+${status.bonus})`
        }
    }

    // 101 - 120 —Å–º (–í–Ω–µ—à–Ω–∏–π –º–∏—Ä - 1 —á–∞—Å—Ç—å)
    if (101 <= status.current && status.current <= 120) {
        status.growed = random.between(-5, 10)
        status.string.history = `–í—ã –≤—ã–±—Ä–∞–ª–∏—Å—å –∏–∑ –ø–µ—â–µ—Ä—ã –∏ –ø—Ä—è–º–æ —É –≤—ã—Ö–æ–¥–∞ –∑–∞–º–µ—Ç–∏–ª–∏ –±–æ–ª—å—à–æ–µ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–µ –ø–æ–º–µ—Å—Ç—å–µ. –ë–µ–∑ —Ä–∞–∑–¥—É–º–∏–π –≤—ã –∑–∞—à–ª–∏ —Ç—É–¥–∞, –Ω–æ –ø–æ–∫–∞ –≤—ã–±–∏—Ä–∞–ª–∏—Å—å –∑–∞–º–µ—Ç–Ω–æ –≤—ã—Ä–æ—Å–ª–∏, –∏ –≥–æ—Ä–¥–æ –≤—ã–ø—Ä—è–º–∏–≤ —Å—Ç–æ—è—á–∏–π –ø–µ–Ω–∏—Å –ø—Ä–æ–±–∏–ª–∏ –≥–æ–ª–æ–≤–∫–æ–π –ø–æ—Ç–æ–ª–æ–∫, –±—ã–ª–æ, –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å–Ω–æ...`
        status.image = '101_120'
        if (roll.debuff() == true) {
            status.bonus = random.between(-3, -1)
            status.string.debuff = `–±—ã–ª –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç —É–¥–∞—Ä–∞ (-${status.bonus})`
        }
    }

    // 121 - 140 —Å–º (–í–Ω–µ—à–Ω–∏–π –º–∏—Ä - 1 —á–∞—Å—Ç—å)
    if (121 <= status.current && status.current <= 140) {
        status.growed = random.between(1, 5)
        status.string.history = `–ò–∑—É—á–∏–≤ –ø–æ–º–µ—Å—Ç—å–µ –≤—ã –Ω–∞—à–ª–∏ –∫—Ä–æ–≤–∞—Ç—å, –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –≤–∞—Å, –Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤—Å–µ –∂–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å`
        status.image = '121_140'
        if (roll.buff() == true) {
            status.bonus = random.between(1, 5)
            status.string.debuff = `–±—ã–ª –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç —Å–Ω–∞ (${status.bonus})`
        }
    }

    // 141 - 160 —Å–º (–í–Ω–µ—à–Ω–∏–π –º–∏—Ä - 1 —á–∞—Å—Ç—å)
    if (121 <= status.current && status.current <= 140) {
        status.growed = random.between(1, 5)
        status.string.history = `–ò–∑—É—á–∏–≤ –ø–æ–º–µ—Å—Ç—å–µ –≤—ã –Ω–∞—à–ª–∏ –∫—Ä–æ–≤–∞—Ç—å, –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –≤–∞—Å, –Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤—Å–µ –∂–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å`
        status.image = '121_140'
        if (roll.buff() == true) {
            status.bonus = random.between(1, 5)
            status.string.debuff = `–±—ã–ª –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç —Å–Ω–∞ (${status.bonus})`
        }
    }
    
    status.current = status.current + status.growed + status.bonus
    if (status.growed <= 0) status.string.state = '—É–º–µ–Ω—å—à–∏–ª—Å—è'
    if (status.current <= 0) status.current = 0
    await Cock.updateOne({id: cock.id}, {lenght: status.current, location: status.location, next: Date.now() + next})
    await context.send(`
        @id${user[0].id} (${cock.name}), –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ–∫–∞ ${status.string.start}\n
        –°–µ–≥–æ–¥–Ω—è –Ω–∞ –≤–∞—Å ${status.string.buff} –∏ ${status.string.debuff}\n
        –í–∞—à —á–ª–µ–Ω ${status.string.state} –Ω–∞ ${status.growed + status.bonus}—Å–º. –¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${status.current}—Å–º\n
        ${status.string.history}\n
        `, 
    { 
        attachment: await vk.upload.messagePhoto({ source: { value: path.join(__dirname + `/public/img/cock/${status.location}/cock${status.image}.png`) } }) 
    })

})

